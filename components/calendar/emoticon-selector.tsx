"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Badge } from "@/components/ui/badge"
import { X, Smile, Plus } from "lucide-react"

// Librer√≠a de emojis organizada por categor√≠as
const EMOJI_CATEGORIES = {
  "Caras y Emociones": [
    "üòÄ",
    "üòÉ",
    "üòÑ",
    "üòÅ",
    "üòÜ",
    "üòÖ",
    "üòÇ",
    "ü§£",
    "üòä",
    "üòá",
    "üôÇ",
    "üôÉ",
    "üòâ",
    "üòå",
    "üòç",
    "ü•∞",
    "üòò",
    "üòó",
    "üòô",
    "üòö",
    "üòã",
    "üòõ",
    "üòù",
    "üòú",
    "ü§™",
    "ü§®",
    "üßê",
    "ü§ì",
    "üòé",
    "ü§©",
    "ü•≥",
    "üòè",
    "üòí",
    "üòû",
    "üòî",
    "üòü",
    "üòï",
    "üôÅ",
    "‚òπÔ∏è",
    "üò£",
    "üòñ",
    "üò´",
    "üò©",
    "ü•∫",
    "üò¢",
    "üò≠",
    "üò§",
    "üò†",
    "üò°",
    "ü§¨",
    "ü§Ø",
    "üò≥",
    "ü•µ",
    "ü•∂",
    "üò±",
    "üò®",
    "üò∞",
    "üò•",
    "üòì",
    "ü§ó",
    "ü§î",
    "ü§≠",
    "ü§´",
    "ü§•",
    "üò∂",
    "üòê",
    "üòë",
    "üò¨",
    "üôÑ",
    "üòØ",
    "üò¶",
    "üòß",
    "üòÆ",
    "üò≤",
    "ü•±",
    "üò¥",
    "ü§§",
    "üò™",
    "üòµ",
    "ü§ê",
  ],
  "Salud y Medicina": [
    "ü§í",
    "ü§ï",
    "ü§¢",
    "ü§Æ",
    "ü§ß",
    "üò∑",
    "ü§†",
    "ü•¥",
    "üòµ‚Äçüí´",
    "ü§Ø",
    "ü©π",
    "üíä",
    "üíâ",
    "ü©∫",
    "üè•",
    "‚öïÔ∏è",
    "üßë‚Äç‚öïÔ∏è",
    "üë©‚Äç‚öïÔ∏è",
    "üë®‚Äç‚öïÔ∏è",
  ],
  "Gestos y Manos": [
    "üëç",
    "üëé",
    "üëå",
    "ü§å",
    "ü§è",
    "‚úåÔ∏è",
    "ü§û",
    "ü§ü",
    "ü§ò",
    "ü§ô",
    "üëà",
    "üëâ",
    "üëÜ",
    "üñï",
    "üëá",
    "‚òùÔ∏è",
    "üëã",
    "ü§ö",
    "üñêÔ∏è",
    "‚úã",
    "üññ",
    "üëè",
    "üôå",
    "ü§≤",
    "ü§ù",
    "üôè",
  ],
  Corazones: ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§ç", "ü§é", "üíî", "‚ù£Ô∏è", "üíï", "üíû", "üíì", "üíó", "üíñ", "üíò", "üíù"],
}

interface EmoticonSelectorProps {
  selectedEmoticonos: string[]
  onEmoticonosChange: (emoticonos: string[]) => void
  maxEmoticonos?: number
}

export function EmoticonSelector({ selectedEmoticonos, onEmoticonosChange, maxEmoticonos = 5 }: EmoticonSelectorProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [activeCategory, setActiveCategory] = useState("Caras y Emociones")

  const handleEmoticonClick = (emoji: string) => {
    if (selectedEmoticonos.includes(emoji)) {
      // Remover emoji si ya est√° seleccionado
      onEmoticonosChange(selectedEmoticonos.filter((e) => e !== emoji))
    } else if (selectedEmoticonos.length < maxEmoticonos) {
      // A√±adir emoji si no se ha alcanzado el m√°ximo
      onEmoticonosChange([...selectedEmoticonos, emoji])
    }
  }

  const handleRemoveEmoji = (emoji: string, event: React.MouseEvent) => {
    event.preventDefault()
    event.stopPropagation()
    onEmoticonosChange(selectedEmoticonos.filter((e) => e !== emoji))
  }

  const handleCategoryClick = (category: string, event: React.MouseEvent) => {
    event.preventDefault()
    event.stopPropagation()
    setActiveCategory(category)
  }

  const handleTriggerClick = (event: React.MouseEvent) => {
    event.preventDefault()
    event.stopPropagation()
    setIsOpen(!isOpen)
  }

  return (
    <div className="space-y-3">
      <Label className="flex items-center gap-2">
        <Smile className="h-4 w-4" />
        Emojis de la cita
        <span className="text-xs text-gray-500">
          ({selectedEmoticonos.length}/{maxEmoticonos})
        </span>
      </Label>

      {/* Emojis seleccionados */}
      {selectedEmoticonos.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {selectedEmoticonos.map((emoji, index) => (
            <Badge key={`${emoji}-${index}`} variant="secondary" className="flex items-center gap-1 px-2 py-1">
              <span className="text-lg">{emoji}</span>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                className="h-4 w-4 p-0 hover:bg-red-100"
                onClick={(e) => handleRemoveEmoji(emoji, e)}
              >
                <X className="h-3 w-3" />
              </Button>
            </Badge>
          ))}
        </div>
      )}

      {/* Selector de emojis */}
      <Popover open={isOpen} onOpenChange={setIsOpen}>
        <PopoverTrigger asChild>
          <Button
            type="button"
            variant="outline"
            className="w-full justify-start gap-2 bg-transparent"
            disabled={selectedEmoticonos.length >= maxEmoticonos}
            onClick={handleTriggerClick}
          >
            <Plus className="h-4 w-4" />
            {selectedEmoticonos.length === 0
              ? "A√±adir emojis"
              : selectedEmoticonos.length >= maxEmoticonos
                ? `M√°ximo alcanzado (${maxEmoticonos})`
                : `A√±adir m√°s emojis (${selectedEmoticonos.length}/${maxEmoticonos})`}
          </Button>
        </PopoverTrigger>
        <PopoverContent
          className="w-80 p-0"
          align="start"
          onOpenAutoFocus={(e) => e.preventDefault()}
          onCloseAutoFocus={(e) => e.preventDefault()}
          onPointerDownOutside={(e) => e.preventDefault()}
        >
          <div className="p-3" onClick={(e) => e.stopPropagation()}>
            {/* Pesta√±as de categor√≠as */}
            <div className="flex flex-wrap gap-1 mb-3 border-b pb-2">
              {Object.keys(EMOJI_CATEGORIES).map((category) => (
                <Button
                  key={category}
                  type="button"
                  variant={activeCategory === category ? "default" : "ghost"}
                  size="sm"
                  className="text-xs h-7"
                  onClick={(e) => handleCategoryClick(category, e)}
                >
                  {category}
                </Button>
              ))}
            </div>

            {/* Grid de emojis */}
            <div className="grid grid-cols-8 gap-1 max-h-48 overflow-y-auto">
              {EMOJI_CATEGORIES[activeCategory as keyof typeof EMOJI_CATEGORIES].map((emoji) => {
                const isSelected = selectedEmoticonos.includes(emoji)
                const isDisabled = !isSelected && selectedEmoticonos.length >= maxEmoticonos

                return (
                  <Button
                    key={emoji}
                    type="button"
                    variant={isSelected ? "default" : "ghost"}
                    size="sm"
                    className={`h-8 w-8 p-0 text-lg hover:scale-110 transition-transform ${
                      isDisabled ? "opacity-50 cursor-not-allowed" : ""
                    }`}
                    onMouseDown={(e) => {
                      e.preventDefault()
                      e.stopPropagation()
                      if (!isDisabled) {
                        handleEmoticonClick(emoji)
                      }
                    }}
                    disabled={isDisabled}
                    title={isSelected ? "Click para quitar" : "Click para a√±adir"}
                  >
                    {emoji}
                  </Button>
                )
              })}
            </div>

            {/* Informaci√≥n */}
            <div className="mt-3 pt-2 border-t text-xs text-gray-500 text-center">
              üí° Puedes seleccionar hasta {maxEmoticonos} emojis por cita
            </div>
          </div>
        </PopoverContent>
      </Popover>

      {/* Mensaje de ayuda */}
      {selectedEmoticonos.length === 0 && (
        <p className="text-xs text-gray-500">Los emojis ayudan a identificar r√°pidamente el estado o tipo de cita</p>
      )}
    </div>
  )
}
